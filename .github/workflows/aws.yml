name: Docker Image Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'plank-datalake/**'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: plank-datalake
  ECR_REGISTRY: 121253776145.dkr.ecr.us-east-1.amazonaws.com
  CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
  SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
  TASK_DEFINITION_FAMILY: plankdatalake
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  deploy:
    name: Build and Deploy Image
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set Image Tag
        id: set-image-tag
        run: |
          IMAGE_TAG=${GITHUB_SHA}
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build Docker Image
        id: build-image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

      - name: Push Docker Image to ECR
        id: push-image
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download task definition
        id: download-task-def
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.TASK_DEFINITION_FAMILY }} \
            --query 'taskDefinition' \
            --output json > task-definition.json

      - name: Clean and update task definition
        id: clean-update-task-def
        run: |
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy) |
              .containerDefinitions[0].image = $IMAGE' \
              --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" \
              < task-definition.json > new-task-definition.json

      - name: Register new task definition
        id: register-task-def
        run: |
          TASK_REVISION=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-definition.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "TASK_REVISION=$TASK_REVISION" >> $GITHUB_ENV

      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ env.TASK_REVISION }}
          service: ${{ env.SERVICE_NAME }}
          cluster: ${{ env.CLUSTER_NAME }}
          wait-for-service-stability: true
