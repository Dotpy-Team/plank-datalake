name: Docker Image Deployment

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1                  # Defina isso para a sua região AWS preferida, por exemplo, us-west-1
  ECR_REPOSITORY: plank-datalake         # Defina isso para o nome do seu repositório Amazon ECR
  ECR_REGISTRY: 121253776145.dkr.ecr.us-east-1.amazonaws.com # O registro ECR do seu repositório

jobs:
  deploy:
    name: Build and Deploy Image
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Set Image Tag
      id: set-image-tag
      run: echo "IMAGE_TAG=${GITHUB_REF#refs/heads/}-${{ github.run_id }}" >> $GITHUB_ENV

    - name: Build Docker Image
      id: build-image
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }} .

    - name: Push Docker Image to ECR
      id: push-image
      run: |
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

    - name: Update ECS Task Definition
      id: update-task-def
      env:
        CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
        SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
        CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
        ECR_IMAGE: ${{ steps.push-image.outputs.image }}
        TASK_DEFINITION_FAMILY: ${{ secrets.TASK_DEFINITION_FAMILY }}
      run: |
        # Get the current task definition
        CURRENT_TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_FAMILY --query 'taskDefinition' --output json)
        
        # Update the container image
        UPDATED_CONTAINER_DEFINITIONS=$(echo $CURRENT_TASK_DEFINITION | jq --arg IMAGE "$ECR_IMAGE" '.containerDefinitions[0].image=$IMAGE')
        
        # Prepare the updated task definition
        UPDATED_TASK_DEFINITION=$(echo $CURRENT_TASK_DEFINITION | jq '{
          family: .family,
          containerDefinitions: .containerDefinitions,
          networkMode: .networkMode,
          cpu: .cpu,
          memory: .memory,
          volumes: .volumes,
          placementConstraints: .placementConstraints,
          requiresCompatibilities: .requiresCompatibilities,
          executionRoleArn: (.executionRoleArn // null) | select(. != null),
          taskRoleArn: (.taskRoleArn // null) | select(. != null)
        }')

        # Register the new task definition
        NEW_TASK_DEFINITION=$(aws ecs register-task-definition \
          --family $TASK_DEFINITION_FAMILY \
          --cli-input-json "$UPDATED_TASK_DEFINITION")
        
        # Extract the new revision number
        NEW_REVISION=$(echo $NEW_TASK_DEFINITION | jq -r '.taskDefinition.revision')
        echo "New task definition revision: $NEW_REVISION"

        # Output the new task definition ARN
        NEW_TASK_DEFINITION_ARN=$(echo $NEW_TASK_DEFINITION | jq -r '.taskDefinition.taskDefinitionArn')
        echo "new-task-definition-arn=$NEW_TASK_DEFINITION_ARN" >> $GITHUB_ENV

    - name: Update ECS Service
      id: update-ecs
      env:
        CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
        SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
        NEW_TASK_DEFINITION_ARN: ${{ env.NEW_TASK_DEFINITION_ARN }}
      run: |
        aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $NEW_TASK_DEFINITION_ARN --force-new-deployment --region $AWS_REGION
