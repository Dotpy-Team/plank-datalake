name: Docker Image Deployment

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: plank-datalake
  ECR_REGISTRY: 121253776145.dkr.ecr.us-east-1.amazonaws.com
  CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
  SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
  TASK_DEFINITION_FAMILY: ${{ secrets.TASK_DEFINITION_FAMILY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  deploy:
    name: Build and Deploy Image
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set Image Tag
      id: set-image-tag
      run: |
        echo "IMAGE_TAG=${GITHUB_REF#refs/heads/}-${GITHUB_RUN_ID}" >> $GITHUB_ENV

    - name: Build Docker Image
      id: build-image
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }} .

    - name: Push Docker Image to ECR
      id: push-image
      run: |
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

    - name: Generate task definition
      id: task-def
      uses: aws-actions/amazon-ecs-task-definition-generator@v1
      with:
        task-definition: |
          {
            "family": "${{ secrets.TASK_DEFINITION_FAMILY }}",
            "containerDefinitions": [
              {
                "name": "${{ secrets.CONTAINER_NAME }}",
                "image": "${{ steps.push-image.outputs.image }}",
                "portMappings": [
                  {
                    "containerPort": 8000,
                    "hostPort": 8000,
                    "protocol": "tcp"
                  }
                ],
                "essential": true,
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/${{ secrets.TASK_DEFINITION_FAMILY }}",
                    "awslogs-create-group": "true",
                    "awslogs-region": "${{ env.AWS_REGION }}",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ],
            "executionRoleArn": "arn:aws:iam::121253776145:role/ecsTaskExecutionRole",
            "networkMode": "awsvpc",
            "requiresCompatibilities": [
              "FARGATE"
            ],
            "cpu": "1024",
            "memory": "3072"
          }
        container-name: ${{ secrets.CONTAINER_NAME }}
        image: ${{ steps.push-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ secrets.SERVICE_NAME }}
        cluster: ${{ secrets.CLUSTER_NAME }}
        wait-for-service-stability: true
